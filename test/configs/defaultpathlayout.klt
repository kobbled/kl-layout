%include define_type.m

-- define file type (i.e. csv, gcode, etc...)
%defeval LAYOUT_FILE_TYPE CSV_TYPE

--csv object
------------------
%define CSV_OBJECT_NAME tstcsv

%define PIPE_NAME 'PIP:CSVLAYER.DAT'
%define PIP_OBJECT_NAME tstpip

------------------
--attributes
-------------------------
%define NUM_OF_ATTRIBUTES 5

%mode push
%mode string QQQ "`" "`" "\\"
%define impl_attrs `
ROUTINE createAttr
  BEGIN
    attribPntrs[1] = new_attr_pntr(1, 1, '', '', ',', C_INT)
    attribPntrs[2] = new_attr_pntr(2, 1, '', '', ',', C_INT)
    attribPntrs[3] = new_attr_pntr(3, 1, '', '', ',', C_REAL)
    attribPntrs[4] = new_attr_pntr(4, 1, '', '', ',', C_VEC)
    attribPntrs[5] = new_attr_pntr(7, 1, '', '', ',', C_VEC)
  END createAttr
`
%mode pop

-------------------------
--layout
-------------------------
-- name of struct
%define LAYOUT_STRUCT T_CSVPATH
--members in struct
%mode push
%mode string QQQ "`" "`" "\\"
%define layout_type `TYPE
  LAYOUT_STRUCT FROM pathlayout = STRUCTURE
    layer  : INTEGER
    code   : INTEGER
    depth  : REAL
    pose   : VECTOR
    orient : VECTOR
  ENDSTRUCTURE
`
%mode pop

%mode push
%mode string QQQ "`" "`" "\\"
%define impl_deserialize `
ROUTINE deserialize
  BEGIN
    --copy attributes into user defined struct
    fileAttr(attribPntrs[1])
    nde.layer = (data.int)
    fileAttr(attribPntrs[2])
    nde.code = (data.int)
    fileAttr(attribPntrs[3])
    nde.depth = (data.rl)
    fileAttr(attribPntrs[4])
    nde.pose = (data.vec)
    fileAttr(attribPntrs[5])
    nde.orient = (data.vec)
  END deserialize
`
%mode pop

-------------------------
--buffering
-------------------------
--buffer conditions
%define MAX_BUFFER_LINES 1000

--buffer loading condition
  --load per layer
%mode push
%mode string QQQ "`" "`" "\\"
%define impl_buffer_condition `
  ROUTINE buffer_cond : BOOLEAN
    VAR
      lns : INTEGER
    BEGIN
      IF endoffile THEN RETURN(FALSE); ENDIF

      --if at least one line has been written to the pipe evauluate
      IF PATH_LEN(buffer) > 0 THEN
        --read layer attribute
        fileAttr(attribPntrs[1])
      
        -- If read indicates we are on the next layer, exit buffer condition.
        IF data.int > prev_data.int THEN
          -- make copy of data for next evaluation cycle
          copyFileData(prev_data)
          --on next layer, break loop.
          RETURN(FALSE)
        ENDIF

        -- make copy of data for next evaluation cycle
        copyFileData(prev_data)
        -- still on the same layer continue
        RETURN(TRUE)
      ELSE
        --read layer attribute for the next iteration
        fileAttr(attribPntrs[1])
        copyFileData(prev_data)
        
        --first row continue
        RETURN(TRUE)
      ENDIF
    END buffer_cond
`
%mode pop

-------------------------
--instances
-------------------------

%mode push
%mode string QQQ "`" "`" "\\"
%define impl_instance `
ROUTINE countInstances
  VAR
    i, status : INTEGER
    counter : INTEGER
    b, b2 : BOOLEAN
  BEGIN
    --check that file is open
    isFileOpen

    counter = 0
    APPEND_NODE(out_pth,status)

    i = 1
    REPEAT
      --read from file
      b = readfile
      IF b THEN
        
        b2 = buffer_cond

        --needed to get past conditional in buffer_cond
        APPEND_NODE(buffer,status)

        --if on next layer store passes
        --and index list to next layer
        IF (NOT b2) THEN
          --store passes in layer index
          out_pth[PATH_LEN(out_pth)].v = counter

          counter = 0
          APPEND_NODE(out_pth,status)
        ENDIF

        --parse point code attribute
        fileAttr(attribPntrs[2])

        --count the number of passes per layer
        IF data.int = PTH_CLOSE THEN
          counter = counter + 1
        ENDIF

        i = i + 1
      ENDIF
      
    UNTIL((NOT b))

    --store last layers passes
    out_pth[PATH_LEN(out_pth)].v = counter

    --remove dummy node in buffer
    DELETE_NODE(buffer,i,status)
    
  END countInstances
`
%mode pop
