%include define_type.m

-- define file type (i.e. csv, gcode, etc...)
%defeval LAYOUT_FILE_TYPE CSV_TYPE

-- define type for storing instances
%define INSTANCE_TYPE t_INTEGER

--csv object
------------------
%define CSV_OBJECT_NAME tstcsv

--template dependencies
---------------
%mode push
%mode string QQQ "$" "$" "\\"
%define type_includes $

$

%define header_includes $

$

%define var_includes $

$
%mode pop

------------------
--attributes
-------------------------
%define NUM_OF_ATTRIBUTES 2

%mode push
%mode string QQQ "`" "`" "\\"
%define impl_attrs `
ROUTINE createAttr
  BEGIN
    --coordinate
    attribPntrs[1] = new_attr_pntr(1, 1, '', '', ',', C_VEC2D)
    --polygon
    attribPntrs[2] = new_attr_pntr(3, 1, '', '', ',', C_INT)
  END createAttr
`
%mode pop

-------------------------
--layout
-------------------------
-- name of struct
%define LAYOUT_STRUCT T_CSVPOLY
--members in struct
%mode push
%mode string QQQ "`" "`" "\\"
%define layout_type `TYPE
  LAYOUT_STRUCT FROM layout = STRUCTURE
    coords   : VECTOR
    polygon  : INTEGER
  ENDSTRUCTURE
`
%mode pop

%mode push
%mode string QQQ "`" "`" "\\"
%define impl_deserialize `
ROUTINE deserialize
  BEGIN
    --copy attributes into user defined struct
    fileAttr(attribPntrs[1])
    nde.coords = (data.vec)
    fileAttr(attribPntrs[2])
    nde.polygon = (data.int)
  END deserialize
`
%mode pop

-------------------------
--buffering
-------------------------
--buffer conditions
%define MAX_BUFFER_LINES 1000

--buffer loading condition
  --load per layer
%mode push
%mode string QQQ "`" "`" "\\"
%define impl_buffer_condition `
  ROUTINE buffer_cond : BOOLEAN
    VAR
      lns : INTEGER
    BEGIN
      IF endoffile THEN RETURN(FALSE); ENDIF

      --if at least one line has been written to the pipe evauluate
      IF PATH_LEN(buffer) > 0 THEN
        --read polygon attribute
        fileAttr(attribPntrs[2])
      
        -- If polygon number changes, end buffer
        IF data.int > prev_data.int THEN
          -- make copy of data for next evaluation cycle
          copyFileData(prev_data)
          --on next layer, break loop.
          RETURN(FALSE)
        ENDIF

        -- make copy of data for next evaluation cycle
        copyFileData(prev_data)
        -- move to next index of the polygon
        RETURN(TRUE)
      ELSE
        --read polygon index of next polygon
        --from pointer
        fileAttr(attribPntrs[2])
        copyFileData(prev_data)
        
        --first row continue
        RETURN(TRUE)
      ENDIF
    END buffer_cond
`
%mode pop

-------------------------
--instances
-------------------------

%mode push
%mode string QQQ "`" "`" "\\"
%define impl_instance `
ROUTINE detIndexBase
  BEGIN
    fileAttr(attribPntrs[2])
    indexBase = data.int
  END detIndexBase
ROUTINE counter_cond
  BEGIN
    --count the number of passes per layer
      counter = counter + 1
  END counter_cond
ROUTINE countInstances
  VAR
    i, status : INTEGER
    counter : INTEGER
    b, b2 : BOOLEAN
  BEGIN
    --check that file is open
    isFileOpen

    --get first line and determine index base
    b = readfile
    detIndexBase  --should either be 0 or 1
    
    counter = 0
    APPEND_NODE(out_pth,status)

    i = 1
    REPEAT
      --read from file
      IF i > 1 THEN  --first line is already read
        b = readfile
      ENDIF

      IF b THEN
        --determine if the index is part of the current polygon
        b2 = buffer_cond

        --append node for the polygon
        APPEND_NODE(buffer,status)

        --pnce full polygon has been loaded
        IF (NOT b2) THEN
          --store number of verticies of the current polygon
          out_pth[PATH_LEN(out_pth)].v = counter

          counter = 0
          APPEND_NODE(out_pth,status)
        ENDIF

        --count next vertex
        counter = counter + 1

        i = i + 1
      ENDIF
      
    UNTIL((NOT b))

    --store last polygon
    out_pth[PATH_LEN(out_pth)].v = counter

    --remove dummy node in buffer
    DELETE_NODE(buffer,i,status)
    
  END countInstances
`
%mode pop
