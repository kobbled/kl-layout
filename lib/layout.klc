PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'layout'
%NOLOCKGROUP

%include namespace.m

%include errors.klt
%include systemlib.klt

--load template specific includes
type_includes

%include layout.t.klt
%include layout.deps.klt

%define BASE_CLASSNAME class_name

--define layout struct
layout_type

VAR
  filename : STRING[20]
  filetyp : INTEGER
  attribPntrs : ARRAY[NUM_OF_ATTRIBUTES] OF t_ATTRPNTR
  nde : LAYOUT_STRUCT
  buffer : PATH nodedata = LAYOUT_STRUCT
  prev_data : t_DATA_TYPE
  linenum, buffernum : INTEGER -- keep track of how many buffer cycles have been completed
  indexBase : INTEGER --specify the base of the array index (i.e. 0 or 1)
  counter : INTEGER
--define interface variables
var_includes

-- reference to 'data' attribute in CSV_OBJECT_NAME
%include csvclass.friends.klt
csvclass_friends(CSV_OBJECT_NAME)

%ifdef LAYOUT_FILE_TYPE CSV_TYPE
--define csv object
csv_make_define(CSV_OBJECT_NAME)

%else
%error 'file type not yet implemented for layout object.'
%endif

%include systemlib.datatype.klh
%from strings.klh %import takeNextStr, takeStr

--load template specific includes
header_includes

%defeval class_name BASE_CLASSNAME

%include layout.private.klh
%include layout.klh

--private

  --load interfaces
%ifdef LAYOUT_FILE_TYPE CSV_TYPE
%include layout.csv.klt
%else
%error 'file type not yet implemented for layout object.'
%endif

-- user macro
impl_attrs

--public

ROUTINE clear_buffer
  VAR
    i : INTEGER
    status : INTEGER
  BEGIN
    i = PATH_LEN(buffer)
    WHILE PATH_LEN(buffer) > 0 DO
		  DELETE_NODE(buffer,i,status)
      i = i - 1
	  ENDWHILE
  END clear_buffer

ROUTINE reset_counter
  BEGIN
    counter = 0
  END reset_counter

ROUTINE new
  BEGIN
    --select file type
    filetyp = LAYOUT_FILE_TYPE

    --get filename without extension
    filename = takeStr(fname, '.')

    --clear buffer
    clear_buffer

    --initialize read file
    loadfile(fname)

    --load attributes
    createAttr

    buffernum = 0
    indexBase = 0
  END new

ROUTINE delete
  BEGIN
    --clear buffer
    clear_buffer

    --delete file objects
    closefile
    deletefile

    buffernum = 0
    indexBase = 0
  END delete

ROUTINE new_attr_pntr
  VAR
    att : t_ATTRPNTR
  BEGIN
    att.offset = offset ; att.size = size ; att.typ = typ ;
    att.prefix = prefix ; att.postfix = postfix ; att.sepChar = sepChar ;
    
    RETURN(att)
  END new_attr_pntr

ROUTINE get_index_base
  BEGIN
    RETURN(indexBase)
  END get_index_base

ROUTINE get_buffer_cycles
  BEGIN
    RETURN(buffernum)
  END get_buffer_cycles

ROUTINE get_current_index
  BEGIN
    RETURN(linenum)
  END get_current_index

ROUTINE get_counter
  BEGIN
    RETURN(counter)
  END get_counter

-- user macro
impl_deserialize

-- user macro
impl_buffer_condition

--user macro
impl_instance

ROUTINE bufferLength
  BEGIN
    RETURN(PATH_LEN(buffer))
  END bufferLength

ROUTINE loadBuffer
  VAR
    i, status : INTEGER
    success, next : BOOLEAN
  BEGIN

    --clear buffer
    clear_buffer

    --reset counter
    counter = 0

    --read lines into pipe
    i = 1
    REPEAT
      --read from file
      IF (buffernum > 0) THEN
        IF (i > 1) THEN
          --Dont read first line of next buffer as it has already
          --been read by the previous buffer
          success = readfile
        ELSE
          success = TRUE
        ENDIF
      ELSE
        --read line from file
        success = readfile
      ENDIF
      
      --check buffer condition an successful read to continue buffer
      -- `buffer_cond` -> user macro
      next = (success AND buffer_cond)

      IF next THEN
        APPEND_NODE(buffer,status)
        deserialize
        buffer[PATH_LEN(buffer)] = nde

        -- increment counter on condition
        counter_cond(nde)
      ENDIF
      
      i = i + 1
    UNTIL(NOT next)
    
    --increment buffer cycles
    buffernum = buffernum + 1

    --return true if more data still needs to be read into the buffer
    --or if you are at EOF
    RETURN(endoffile)

  END loadBuffer


BEGIN
END class_name
